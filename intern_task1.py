# -*- coding: utf-8 -*-
"""intern_task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mJ5-MckTZI8QDMBqDQeCjPJj4W9PJnlU
"""

!pip install opendatasets

import opendatasets as od
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.metrics import f1_score,roc_curve,accuracy_score,confusion_matrix,classification_report,roc_auc_score
from tensorflow.keras.callbacks import EarlyStopping
import joblib

od.download("https://www.kaggle.com/datasets/fedesoriano/heart-failure-prediction")

df = pd.read_csv("/content/heart-failure-prediction/heart.csv")

df.head()

df.describe()

df.isnull().sum()

numerical_columns = df.select_dtypes(include=['int64', 'float64','int32']).columns
for column in numerical_columns:
  sns.boxplot(df[column])
  plt.show()

def remove_outliers(df, column):
  Q1 = df[column].quantile(0.25)
  Q3 = df[column].quantile(0.75)
  IQR = Q3 - Q1
  lower_bound = Q1 - 1.5 * IQR
  upper_bound = Q3 + 1.5 * IQR
  df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
  return df

df = remove_outliers(df, 'RestingBP')
df = remove_outliers(df, 'Cholesterol')
df = remove_outliers(df, 'Oldpeak')

for column in numerical_columns:
  sns.boxplot(df[column])
  plt.show()

df.info()

# LE = LabelEncoder()
# df['Sex'] = LE.fit_transform(df['Sex'])
# df['ChestPainType'] = LE.fit_transform(df['ChestPainType'])
# df['RestingECG'] = LE.fit_transform(df['RestingECG'])
# df['ExerciseAngina'] = LE.fit_transform(df['ExerciseAngina'])
# df['ST_Slope'] = LE.fit_transform(df['ST_Slope'])


le_sex = LabelEncoder()
df['Sex'] = le_sex.fit_transform(df['Sex'])
joblib.dump(le_sex, 'le_sex.pkl')

# Chest Pain Type
le_chest = LabelEncoder()
df['ChestPainType'] = le_chest.fit_transform(df['ChestPainType'])
joblib.dump(le_chest, 'le_chest.pkl')

# RestingECG
le_ecg = LabelEncoder()
df['RestingECG'] = le_ecg.fit_transform(df['RestingECG'])
joblib.dump(le_ecg, 'le_resting_ecg.pkl')

# ExerciseAngina
le_exercise = LabelEncoder()
df['ExerciseAngina'] = le_exercise.fit_transform(df['ExerciseAngina'])
joblib.dump(le_exercise, 'le_exercise.pkl')

# ST_Slope
le_slope = LabelEncoder()
df['ST_Slope'] = le_slope.fit_transform(df['ST_Slope'])
joblib.dump(le_slope, 'le_st_slope.pkl')

# ss = StandardScaler()
# df['Age'] = ss.fit_transform(df[['Age']])
# df['RestingBP'] = ss.fit_transform(df[['RestingBP']])
# df['Cholesterol'] = ss.fit_transform(df[['Cholesterol']])
# df['MaxHR'] = ss.fit_transform(df[['MaxHR']])
# df['Oldpeak'] = ss.fit_transform(df[['Oldpeak']])

scaler = MinMaxScaler()
df[['Age','RestingBP','Cholesterol','MaxHR','Oldpeak']] = scaler.fit_transform(
    df[['Age','RestingBP','Cholesterol','MaxHR','Oldpeak']]
)
joblib.dump(scaler, 'scaler.pkl')

x = df.drop('HeartDisease',axis=1)
y = df['HeartDisease']
y.value_counts()

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

ES = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10, restore_best_weights=True)
model = Sequential()
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=500, batch_size=32, validation_data=(x_test, y_test),callbacks=[ES])

y_pred = model.predict(x_test)
y_pred_classes = (y_pred > 0.5).astype("int32")
f1_score(y_test,y_pred_classes)

roc_auc_score(y_test,y_pred)

roc_curve(y_test,y_pred)

classification_report(y_test,y_pred_classes)

model.save("heart_failure_model.keras")

df.columns



requirements = """streamlit
numpy
pandas
scikit-learn
tensorflow
joblib
matplotlib
seaborn
"""

with open("requirements.txt", "w") as f:
    f.write(requirements)


from google.colab import files
files.download("requirements.txt")

df